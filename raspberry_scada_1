from pymodbus.server.async import StartTcpServer
from pymodbus.datastore import ModbusSequentialDataBlock
from pymodbus.datastore import ModbusSlaveContext, ModbusServerContext
from twisted.internet.task import LoopingCall
import RPi.GPIO as GPIO

LED=26
BZ=19
SW=21
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(LED,GPIO.OUT)
GPIO.setup(BZ,GPIO.OUT)
GPIO.setup(SW, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.output(LED, GPIO.LOW)
GPIO.output(BZ, GPIO.HIGH)

store = ModbusSlaveContext(
    di = ModbusSequentialDataBlock(0, [0]*100),
    co = ModbusSequentialDataBlock(0, [0]*100),
    hr = ModbusSequentialDataBlock(0, [0]*100),
    ir = ModbusSequentialDataBlock(0, [0]*100))
context = ModbusServerContext(slaves=store, single=True)


def updating_writer(a):
    context  = a[0]
    register = 3
    slave_id = 0
    address  = 0
    values = [1]
    if GPIO.input(SW):values = [0]  
    context[slave_id].setValues(register,address,values)
    print values

def read_context(a):
     context  = a[0]
     register = 3
     slave_id = 0
     address  = 10
     value = context[slave_id].getValues(register,address,10)
     if value[0]==0:GPIO.output(LED, GPIO.LOW)
     if value[0]==1:GPIO.output(LED, GPIO.HIGH)
     if value[1]==0:GPIO.output(BZ, GPIO.LOW)
     if value[1]==1:GPIO.output(BZ, GPIO.HIGH)
     print value[0]
     print value[1]

read = LoopingCall(f=read_context, a=(context,))
read.start(.2)

write = LoopingCall(f=updating_writer, a=(context,))
write.start(.2)

StartTcpServer(context)
